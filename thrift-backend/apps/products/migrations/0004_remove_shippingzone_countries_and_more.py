# Generated by Django 4.2.7 on 2025-09-26 05:55

from django.db import migrations, models


def preserve_zone_coverage_data(apps, schema_editor):
    """Migrate existing postal_codes to metro_cities field."""
    ShippingZone = apps.get_model('products', 'ShippingZone')
    
    for zone in ShippingZone.objects.all():
        # Copy postal_codes to metro_cities if postal_codes exists and has data
        if hasattr(zone, 'postal_codes') and zone.postal_codes:
            zone.metro_cities = zone.postal_codes
            zone.save()


def reverse_preserve_zone_coverage_data(apps, schema_editor):
    """Reverse migration - copy metro_cities back to postal_codes."""
    ShippingZone = apps.get_model('products', 'ShippingZone')
    
    for zone in ShippingZone.objects.all():
        if hasattr(zone, 'metro_cities') and zone.metro_cities:
            zone.postal_codes = zone.metro_cities
            zone.save()


def ensure_unique_zone_names(apps, schema_editor):
    """Ensure all zone names are unique before adding unique constraint."""
    ShippingZone = apps.get_model('products', 'ShippingZone')
    
    # Find duplicates
    from django.db.models import Count
    duplicates = ShippingZone.objects.values('name').annotate(
        count=Count('name')
    ).filter(count__gt=1)
    
    for duplicate in duplicates:
        name = duplicate['name']
        zones = ShippingZone.objects.filter(name=name).order_by('id')
        
        # Keep the first zone, rename others
        for i, zone in enumerate(zones[1:], start=2):
            zone.name = f"{name} ({i})"
            zone.save()
            print(f"Renamed duplicate zone to: {zone.name}")


def reverse_ensure_unique_zone_names(apps, schema_editor):
    """Reverse function - cannot reliably restore original duplicate names."""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("products", "0003_shippingcalculator_shippingmethod_shippingzone_and_more"),
    ]

    operations = [
        # First add the new field
        migrations.AddField(
            model_name="shippingzone",
            name="metro_cities",
            field=models.TextField(
                blank=True,
                help_text="Comma-separated metro city postal codes (e.g., 110001,400001)",
            ),
        ),
        # Migrate existing data
        migrations.RunPython(
            preserve_zone_coverage_data,
            reverse_preserve_zone_coverage_data,
        ),
        # Ensure unique zone names before adding constraint
        migrations.RunPython(
            ensure_unique_zone_names,
            reverse_ensure_unique_zone_names,
        ),
        # Then remove the old fields
        migrations.RemoveField(
            model_name="shippingzone",
            name="countries",
        ),
        migrations.RemoveField(
            model_name="shippingzone",
            name="postal_codes",
        ),
        # Update field definitions
        migrations.AlterField(
            model_name="shippingzone",
            name="name",
            field=models.CharField(
                help_text="e.g., Local (Delhi NCR), Regional (North India), National",
                max_length=100,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="shippingzone",
            name="states",
            field=models.TextField(
                blank=True, help_text="Comma-separated state codes (e.g., DL,MH,GJ)"
            ),
        ),
    ]
